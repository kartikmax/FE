import React, { useState } from 'react';
import { Link, useNavigate } from "react-router-dom"
import { Button,FormControl,InputLabel,OutlinedInput,FormHelperText,Alert, Snackbar, TextField,Select,MenuItem} from "@mui/material"
import axios from 'axios';

const {{name}}Form = ({setSection,vars}) => {
const navigate=useNavigate();
let Regex= {password : /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/,email:/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/}
  const [toast, setToast] = useState({ open: false, status: "", msg: "" })

  const [formData, setFormData] = useState({
  {{#each data}}    
    {{name}}: '',
    {{/each}}
  });

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: type === 'checkbox' ? checked : value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
const sendData = {
{{#each data}}
{{#if mapField}}
{{name}}:formData.{{name}},
{{/if}}
{{/each}}
}





{{#each data}}
{{#ifeq fieldType "Button"}}

{{#each action.Actions}}
{{#ifeq type "CallAPI"}}
    axios.{{fields.type}}(import.meta.env.VITE_API +  '{{fields.route}}',{
...sendData
    }).then((res) => {
      {{#each Success}}

{{#ifeq type "setVar"}}
      setVars(res.data.data)
{{/ifeq}}

{{#ifeq type "ShowSection"}}
     setSection((prev)=>({...prev, {{{objToString fields}}} }))
{{/ifeq}}

{{#ifeq type "Redirect"}}
      navigate('/{{fields.url}}')

{{/ifeq}}

{{/each}}
{{/ifeq}}
{{/each}}
{{/ifeq}}
{{/each}}
      setLoad(true)
    }).catch(err=>{
      setToast({ open: true, msg: err.response.data.error, status: "error" })
  });
}
  return (
<>
    <Snackbar open={toast.open} autoHideDuration={6000} onClose={() => setToast((prev) => ({ ...prev, open: false }))}>
      <Alert onClose={() => setToast((prev) => ({ ...prev, open: false }))} severity={toast.status} sx={ { width: "100%" } }>
        {toast.msg}
      </Alert>
    </Snackbar>
   <FormControl onSubmit={handleSubmit}>
{{#each data}}
      
      {{#switch fieldType}}

      {{#case "Textbox"}}
      <TextField
        label="{{label}}"
        name="{{name}}"
        value={ formData.{{name}} }
        onChange={handleChange}
        type='text'
        margin="normal"
        fullWidth 
        helperText={ {{{regex regexValidation name}}}  && "{{regexMsg}}"}
         error={ {{regex  regexValidation  name}} }
      
      />
        {{/case}}
     {{#case "Password"}}
      <TextField
        label="{{label}}"
        name="{{name}}"
        value={ formData.{{name}} }
        onChange={handleChange}
        margin="normal"
        fullWidth
        type="password"
        helperText={ {{{regex regexValidation name}}} && "{{regexMsg}}"}
        error={ {{{regex regexValidation name}}} }
      
      />
        {{/case}}
   

        {{#case "Dropdown"}}
      <FormControl fullWidth>
        <InputLabel>{{label}}</InputLabel>
        <Select
          name="{{name}}"
          value={ formData.{{name}} }
          label="{{label}}"
          onChange={handleChange}
        >
          { vars.{{masters}}.map((v) => (
            <MenuItem key={v.value} value={ v.value }>
              {v.name}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
        {{/case }}
        {{#case "checkbox"}}
      <FormControlLabel
        control={
          <Checkbox
            name="checkbox1"
            checked={formData.checkbox1}
            onChange={handleChange}
          />
        }
        label="Checkbox 1"
      />
        {{/case}}

        {{#case "Button"}}
                        <Button type="{{name}}" variant="contained" onClick={(e) =>handleSubmit(e)} color="primary">
        {{label}}
      </Button> 
        {{/case}}

        {{#case "options"}}
   
      <FormControl component="fieldset">
        <RadioGroup
          name="radio"
          value={ formData.{{name}} }
          onChange={handleChange}
        >
          <FormControlLabel
            value="option1"
            control={<Radio />}
            label="Option 1"
          />
          <FormControlLabel
            value="option2"
            control={<Radio />}
            label="Option 2"
          />
        </RadioGroup>

            
      </FormControl>
         {{/case}} 
          {{/switch}}

      {{/each}}

   
   
    </FormControl>   
          </>
  );
}

export default {{name}}Form;
